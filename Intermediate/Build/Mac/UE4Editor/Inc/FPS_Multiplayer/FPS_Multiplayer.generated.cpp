// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "FPS_Multiplayer.h"
#include "FPS_Multiplayer.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeFPS_Multiplayer() {}
	void AFPS_MultiplayerCharacter::OnFireServer()
	{
		ProcessEvent(FindFunctionChecked(FPS_MULTIPLAYER_OnFireServer),NULL);
	}
	void AFPS_MultiplayerCharacter::StaticRegisterNativesAFPS_MultiplayerCharacter()
	{
		FNativeFunctionRegistrar::RegisterFunction(AFPS_MultiplayerCharacter::StaticClass(),"OnFireServer",(Native)&AFPS_MultiplayerCharacter::execOnFireServer);
	}
	IMPLEMENT_CLASS(AFPS_MultiplayerCharacter, 935367663);
	void AFPS_MultiplayerGameMode::StaticRegisterNativesAFPS_MultiplayerGameMode()
	{
	}
	IMPLEMENT_CLASS(AFPS_MultiplayerGameMode, 3102397667);
	void AFPS_MultiplayerHUD::StaticRegisterNativesAFPS_MultiplayerHUD()
	{
	}
	IMPLEMENT_CLASS(AFPS_MultiplayerHUD, 975695854);
	void AFPS_MultiplayerProjectile::ServerOnHit(AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit)
	{
		FPS_MultiplayerProjectile_eventServerOnHit_Parms Parms;
		Parms.OtherActor=OtherActor;
		Parms.OtherComp=OtherComp;
		Parms.NormalImpulse=NormalImpulse;
		Parms.Hit=Hit;
		ProcessEvent(FindFunctionChecked(FPS_MULTIPLAYER_ServerOnHit),&Parms);
	}
	void AFPS_MultiplayerProjectile::StaticRegisterNativesAFPS_MultiplayerProjectile()
	{
		FNativeFunctionRegistrar::RegisterFunction(AFPS_MultiplayerProjectile::StaticClass(),"OnHit",(Native)&AFPS_MultiplayerProjectile::execOnHit);
		FNativeFunctionRegistrar::RegisterFunction(AFPS_MultiplayerProjectile::StaticClass(),"ServerOnHit",(Native)&AFPS_MultiplayerProjectile::execServerOnHit);
	}
	IMPLEMENT_CLASS(AFPS_MultiplayerProjectile, 1788168331);
FName FPS_MULTIPLAYER_OnFireServer = FName(TEXT("OnFireServer"));
FName FPS_MULTIPLAYER_ServerOnHit = FName(TEXT("ServerOnHit"));
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMontage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundBase_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode();
	ENGINE_API class UClass* Z_Construct_UClass_AHUD();
	ENGINE_API class UClass* Z_Construct_UClass_UFont_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UClass* Z_Construct_UClass_UProjectileMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent_NoRegister();

	FPS_MULTIPLAYER_API class UFunction* Z_Construct_UFunction_AFPS_MultiplayerCharacter_OnFireServer();
	FPS_MULTIPLAYER_API class UClass* Z_Construct_UClass_AFPS_MultiplayerCharacter_NoRegister();
	FPS_MULTIPLAYER_API class UClass* Z_Construct_UClass_AFPS_MultiplayerCharacter();
	FPS_MULTIPLAYER_API class UClass* Z_Construct_UClass_AFPS_MultiplayerGameMode_NoRegister();
	FPS_MULTIPLAYER_API class UClass* Z_Construct_UClass_AFPS_MultiplayerGameMode();
	FPS_MULTIPLAYER_API class UClass* Z_Construct_UClass_AFPS_MultiplayerHUD_NoRegister();
	FPS_MULTIPLAYER_API class UClass* Z_Construct_UClass_AFPS_MultiplayerHUD();
	FPS_MULTIPLAYER_API class UFunction* Z_Construct_UFunction_AFPS_MultiplayerProjectile_OnHit();
	FPS_MULTIPLAYER_API class UFunction* Z_Construct_UFunction_AFPS_MultiplayerProjectile_ServerOnHit();
	FPS_MULTIPLAYER_API class UClass* Z_Construct_UClass_AFPS_MultiplayerProjectile_NoRegister();
	FPS_MULTIPLAYER_API class UClass* Z_Construct_UClass_AFPS_MultiplayerProjectile();
	FPS_MULTIPLAYER_API class UPackage* Z_Construct_UPackage_FPS_Multiplayer();
	UFunction* Z_Construct_UFunction_AFPS_MultiplayerCharacter_OnFireServer()
	{
		UObject* Outer=Z_Construct_UClass_AFPS_MultiplayerCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnFireServer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80220CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AFPS_MultiplayerCharacter_NoRegister()
	{
		return AFPS_MultiplayerCharacter::StaticClass();
	}
	UClass* Z_Construct_UClass_AFPS_MultiplayerCharacter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ACharacter();
			Z_Construct_UPackage_FPS_Multiplayer();
			OuterClass = AFPS_MultiplayerCharacter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;

				OuterClass->LinkChild(Z_Construct_UFunction_AFPS_MultiplayerCharacter_OnFireServer());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_HP = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HP"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HP, AFPS_MultiplayerCharacter), 0x0000000000000020);
				UProperty* NewProp_FireAnimation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FireAnimation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FireAnimation, AFPS_MultiplayerCharacter), 0x0000000000000025, Z_Construct_UClass_UAnimMontage_NoRegister());
				UProperty* NewProp_FireSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FireSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FireSound, AFPS_MultiplayerCharacter), 0x0000000000000025, Z_Construct_UClass_USoundBase_NoRegister());
				UProperty* NewProp_ProjectileClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProjectileClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ProjectileClass, AFPS_MultiplayerCharacter), 0x0004000000010021, Z_Construct_UClass_AFPS_MultiplayerProjectile_NoRegister());
				UProperty* NewProp_GunOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GunOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GunOffset, AFPS_MultiplayerCharacter), 0x0000000000000005, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_BaseLookUpRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseLookUpRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BaseLookUpRate, AFPS_MultiplayerCharacter), 0x0000000000020015);
				UProperty* NewProp_BaseTurnRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseTurnRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(BaseTurnRate, AFPS_MultiplayerCharacter), 0x0000000000020015);
				UProperty* NewProp_FirstPersonCameraComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FirstPersonCameraComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FirstPersonCameraComponent, AFPS_MultiplayerCharacter), 0x00000000000a001d, Z_Construct_UClass_UCameraComponent_NoRegister());
				UProperty* NewProp_Mesh1P = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Mesh1P"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Mesh1P, AFPS_MultiplayerCharacter), 0x00000000000b0009, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
PRAGMA_POP
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AFPS_MultiplayerCharacter_OnFireServer()); // 1051436689
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Pawn|Character|InternalEvents Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FPS_MultiplayerCharacter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerCharacter.h"));
				MetaData->SetValue(NewProp_HP, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerCharacter.h"));
				MetaData->SetValue(NewProp_FireAnimation, TEXT("Category"), TEXT("Gameplay"));
				MetaData->SetValue(NewProp_FireAnimation, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerCharacter.h"));
				MetaData->SetValue(NewProp_FireAnimation, TEXT("ToolTip"), TEXT("AnimMontage to play each time we fire"));
				MetaData->SetValue(NewProp_FireSound, TEXT("Category"), TEXT("Gameplay"));
				MetaData->SetValue(NewProp_FireSound, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerCharacter.h"));
				MetaData->SetValue(NewProp_FireSound, TEXT("ToolTip"), TEXT("Sound to play each time we fire"));
				MetaData->SetValue(NewProp_ProjectileClass, TEXT("Category"), TEXT("Projectile"));
				MetaData->SetValue(NewProp_ProjectileClass, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerCharacter.h"));
				MetaData->SetValue(NewProp_ProjectileClass, TEXT("ToolTip"), TEXT("Projectile class to spawn"));
				MetaData->SetValue(NewProp_GunOffset, TEXT("Category"), TEXT("Gameplay"));
				MetaData->SetValue(NewProp_GunOffset, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerCharacter.h"));
				MetaData->SetValue(NewProp_GunOffset, TEXT("ToolTip"), TEXT("Gun muzzle's offset from the characters location"));
				MetaData->SetValue(NewProp_BaseLookUpRate, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_BaseLookUpRate, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerCharacter.h"));
				MetaData->SetValue(NewProp_BaseLookUpRate, TEXT("ToolTip"), TEXT("Base look up/down rate, in deg/sec. Other scaling may affect final rate."));
				MetaData->SetValue(NewProp_BaseTurnRate, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_BaseTurnRate, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerCharacter.h"));
				MetaData->SetValue(NewProp_BaseTurnRate, TEXT("ToolTip"), TEXT("Base turn rate, in deg/sec. Other scaling may affect final turn rate."));
				MetaData->SetValue(NewProp_FirstPersonCameraComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_FirstPersonCameraComponent, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_FirstPersonCameraComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_FirstPersonCameraComponent, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerCharacter.h"));
				MetaData->SetValue(NewProp_FirstPersonCameraComponent, TEXT("ToolTip"), TEXT("First person camera"));
				MetaData->SetValue(NewProp_Mesh1P, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_Mesh1P, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Mesh1P, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerCharacter.h"));
				MetaData->SetValue(NewProp_Mesh1P, TEXT("ToolTip"), TEXT("Pawn mesh: 1st person view (arms; seen only by self)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AFPS_MultiplayerCharacter(Z_Construct_UClass_AFPS_MultiplayerCharacter, TEXT("AFPS_MultiplayerCharacter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AFPS_MultiplayerCharacter);
	UClass* Z_Construct_UClass_AFPS_MultiplayerGameMode_NoRegister()
	{
		return AFPS_MultiplayerGameMode::StaticClass();
	}
	UClass* Z_Construct_UClass_AFPS_MultiplayerGameMode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameMode();
			Z_Construct_UPackage_FPS_Multiplayer();
			OuterClass = AFPS_MultiplayerGameMode::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2088028C;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(LastManStanding, AFPS_MultiplayerGameMode, bool);
				UProperty* NewProp_LastManStanding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastManStanding"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LastManStanding, AFPS_MultiplayerGameMode), 0x0000000000000020, CPP_BOOL_PROPERTY_BITMASK(LastManStanding, AFPS_MultiplayerGameMode), sizeof(bool), true);
PRAGMA_POP
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Info Rendering MovementReplication Replication Actor Input Movement Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FPS_MultiplayerGameMode.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerGameMode.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
				MetaData->SetValue(NewProp_LastManStanding, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerGameMode.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AFPS_MultiplayerGameMode(Z_Construct_UClass_AFPS_MultiplayerGameMode, TEXT("AFPS_MultiplayerGameMode"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AFPS_MultiplayerGameMode);
	UClass* Z_Construct_UClass_AFPS_MultiplayerHUD_NoRegister()
	{
		return AFPS_MultiplayerHUD::StaticClass();
	}
	UClass* Z_Construct_UClass_AFPS_MultiplayerHUD()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AHUD();
			Z_Construct_UPackage_FPS_Multiplayer();
			OuterClass = AFPS_MultiplayerHUD::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2080028C;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_HUDFont = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HUDFont"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(HUDFont, AFPS_MultiplayerHUD), 0x0000000000000000, Z_Construct_UClass_UFont_NoRegister());
PRAGMA_POP
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Rendering Actor Input Replication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FPS_MultiplayerHUD.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerHUD.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
				MetaData->SetValue(NewProp_HUDFont, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerHUD.h"));
				MetaData->SetValue(NewProp_HUDFont, TEXT("ToolTip"), TEXT("Variable for storing the font"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AFPS_MultiplayerHUD(Z_Construct_UClass_AFPS_MultiplayerHUD, TEXT("AFPS_MultiplayerHUD"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AFPS_MultiplayerHUD);
	UFunction* Z_Construct_UFunction_AFPS_MultiplayerProjectile_OnHit()
	{
		struct FPS_MultiplayerProjectile_eventOnHit_Parms
		{
			AActor* OtherActor;
			UPrimitiveComponent* OtherComp;
			FVector NormalImpulse;
			FHitResult Hit;
		};
		UObject* Outer=Z_Construct_UClass_AFPS_MultiplayerProjectile();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnHit"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00C20401, 65535, sizeof(FPS_MultiplayerProjectile_eventOnHit_Parms));
			UProperty* NewProp_Hit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Hit, FPS_MultiplayerProjectile_eventOnHit_Parms), 0x0000008008000182, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_NormalImpulse = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NormalImpulse"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NormalImpulse, FPS_MultiplayerProjectile_eventOnHit_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OtherComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherComp, FPS_MultiplayerProjectile_eventOnHit_Parms), 0x0000000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_OtherActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherActor, FPS_MultiplayerProjectile_eventOnHit_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerProjectile.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("called when projectile hits something"));
			MetaData->SetValue(NewProp_OtherComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AFPS_MultiplayerProjectile_ServerOnHit()
	{
		UObject* Outer=Z_Construct_UClass_AFPS_MultiplayerProjectile();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerOnHit"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80A20CC0, 65535, sizeof(FPS_MultiplayerProjectile_eventServerOnHit_Parms));
			UProperty* NewProp_Hit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Hit, FPS_MultiplayerProjectile_eventServerOnHit_Parms), 0x0000008008000082, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_NormalImpulse = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NormalImpulse"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NormalImpulse, FPS_MultiplayerProjectile_eventServerOnHit_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OtherComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherComp, FPS_MultiplayerProjectile_eventServerOnHit_Parms), 0x0000000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_OtherActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherActor, FPS_MultiplayerProjectile_eventServerOnHit_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerProjectile.h"));
			MetaData->SetValue(NewProp_OtherComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AFPS_MultiplayerProjectile_NoRegister()
	{
		return AFPS_MultiplayerProjectile::StaticClass();
	}
	UClass* Z_Construct_UClass_AFPS_MultiplayerProjectile()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_FPS_Multiplayer();
			OuterClass = AFPS_MultiplayerProjectile::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;

				OuterClass->LinkChild(Z_Construct_UFunction_AFPS_MultiplayerProjectile_OnHit());
				OuterClass->LinkChild(Z_Construct_UFunction_AFPS_MultiplayerProjectile_ServerOnHit());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ProjectileMovement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProjectileMovement"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ProjectileMovement, AFPS_MultiplayerProjectile), 0x00000000000a001d, Z_Construct_UClass_UProjectileMovementComponent_NoRegister());
				UProperty* NewProp_CollisionComp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CollisionComp, AFPS_MultiplayerProjectile), 0x00000000000b0009, Z_Construct_UClass_USphereComponent_NoRegister());
PRAGMA_POP
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AFPS_MultiplayerProjectile_OnHit()); // 3453291149
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AFPS_MultiplayerProjectile_ServerOnHit()); // 1275325633
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FPS_MultiplayerProjectile.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerProjectile.h"));
				MetaData->SetValue(NewProp_ProjectileMovement, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_ProjectileMovement, TEXT("Category"), TEXT("Movement"));
				MetaData->SetValue(NewProp_ProjectileMovement, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ProjectileMovement, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerProjectile.h"));
				MetaData->SetValue(NewProp_ProjectileMovement, TEXT("ToolTip"), TEXT("Projectile movement component"));
				MetaData->SetValue(NewProp_CollisionComp, TEXT("Category"), TEXT("Projectile"));
				MetaData->SetValue(NewProp_CollisionComp, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CollisionComp, TEXT("ModuleRelativePath"), TEXT("FPS_MultiplayerProjectile.h"));
				MetaData->SetValue(NewProp_CollisionComp, TEXT("ToolTip"), TEXT("Sphere collision component"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AFPS_MultiplayerProjectile(Z_Construct_UClass_AFPS_MultiplayerProjectile, TEXT("AFPS_MultiplayerProjectile"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AFPS_MultiplayerProjectile);
	UPackage* Z_Construct_UPackage_FPS_Multiplayer()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/FPS_Multiplayer")), false, false));
			ReturnPackage->PackageFlags |= PKG_CompiledIn | 0x00000000;
			FGuid Guid;
			Guid.A = 0x3027ACCE;
			Guid.B = 0x4D677FA0;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
